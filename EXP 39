#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define N 4

int minCost; // To store the minimum cost found so far

void copyArray(int dest[N][N], int src[N][N]) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            dest[i][j] = src[i][j];
}

int calculateCost(int assignment[N], int cost[N][N]) {
    int totalCost = 0;
    for (int i = 0; i < N; i++)
        totalCost += cost[i][assignment[i]];
    return totalCost;
}

void branchAndBound(int cost[N][N], int assigned[N], int totalCost, int k) {
    if (k == N) {
        minCost = totalCost;
        return;
    }

    for (int i = 0; i < N; i++) {
        if (!assigned[i]) {
            int newTotalCost = totalCost + cost[k][i];

            // Prune if the new total cost exceeds the current minimum cost
            if (newTotalCost >= minCost)
                continue;

            int newAssigned[N];
            copyArray(newAssigned, assigned);
            newAssigned[i] = 1;

            branchAndBound(cost, newAssigned, newTotalCost, k + 1);
        }
    }
}

int solveAssignmentProblem(int cost[N][N]) {
    int assigned[N] = {0};
    minCost = INT_MAX;

    branchAndBound(cost, assigned, 0, 0);

    return minCost;
}

int main() {
    int cost[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };

    int minAssignmentCost = solveAssignmentProblem(cost);
    printf("Minimum Assignment Cost: %d\n", minAssignmentCost);

    return 0;
}
